import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { HumanMessage } from "@langchain/core/messages";
import { SubAgentConfig } from "../types";
import { basicTools } from "./basic-tools";

// SubAgent 配置定义
export const subAgentConfigs: SubAgentConfig[] = [
  {
    type: "general-purpose",
    systemPrompt: `你是一个通用的AI助手，专门处理复杂的多步骤任务。
- 擅长文件搜索、内容分析和代码理解
- 系统性地处理复杂问题并将其分解
- 始终提供详细而准确的分析结果`,
    allowedTools: null // 允许所有工具
  },
  {
    type: "code-analyzer", 
    systemPrompt: `你是代码分析专家，专注于：
- 代码质量评估和改进建议
- 架构设计分析和优化
- 性能瓶颈识别和解决方案
- 安全漏洞检测和修复建议
请提供具体的、可操作的技术建议`,
    allowedTools: ["ReadFile", "EditFile", "Grep", "ListDir"]
  },
  {
    type: "document-writer",
    systemPrompt: `你是技术写作专家，专注于：
- 清晰准确的技术文档
- 用户友好的操作指南  
- 完整的API文档和示例
- 结构化的项目文档
确保文档的可读性和实用性`,
    allowedTools: ["ReadFile", "WriteFile", "EditFile"]
  }
];

// TaskTool 实现
export function createTaskTool(baseTools: any[], model: ChatOpenAI) {
  // 为每种类型创建专门的 ReActAgent 实例
  const agentInstances = new Map<string, any>();
  
  // 初始化预定义的 SubAgent 类型
  subAgentConfigs.forEach(config => {
    const filteredTools = config.allowedTools 
      ? baseTools.filter(tool => config.allowedTools!.includes(tool.name))
      : baseTools.filter(tool => tool.name !== "TaskTool"); // 防止递归
      
    agentInstances.set(config.type, createReactAgent({
      llm: model,
      tools: filteredTools,
      messageModifier: config.systemPrompt
    }));
  });
  
  return tool(
    async (args: { description: string; subagent_type: string }) => {
      const { description, subagent_type } = args;
      
      // 获取指定类型的 Agent
      const agent = agentInstances.get(subagent_type);
      if (!agent) {
        throw new Error(`Unknown SubAgent type: ${subagent_type}`);
      }
      
      // 执行 SubAgent
      try {
        console.log(`🤖 Launching SubAgent [${subagent_type}]: ${description}`);
        
        // 创建隔离的执行上下文
        const subAgentState = {
          messages: [new HumanMessage(description)]
        };
        
        // 执行 Agent 并获取结果
        const result = await agent.invoke(subAgentState);
        
        // 提取最终响应
        const finalMessage = result.messages[result.messages.length - 1];
        const responseContent = finalMessage.content;
        
        console.log(`✅ SubAgent [${subagent_type}] completed`);
        
        // 返回格式化结果 - 模拟 claude-code 的结果格式
        return `SubAgent [${subagent_type}] execution completed:

Task: ${description}

Result:
${responseContent}

Note: This result was generated by a specialized SubAgent. Please summarize key information for the user as needed.`;
        
      } catch (error: any) {
        console.error(`❌ SubAgent [${subagent_type}] failed:`, error);
        return `SubAgent [${subagent_type}] execution failed: ${error.message}`;
      }
    },
    {
      name: "TaskTool",
      description: `Launch specialized SubAgents to autonomously handle complex multi-step tasks.

Available Agent types:
- general-purpose: General agent suitable for complex queries, file searches, and multi-step task execution (Tools: *)
- code-analyzer: Code analysis expert for code review, architecture analysis, performance optimization
- document-writer: Documentation expert for technical docs, user manuals, API documentation

Usage rules:
1. Use this tool when tasks are complex and require specialized handling
2. Each SubAgent invocation is independent and stateless  
3. Provide detailed task descriptions; SubAgents will complete autonomously
4. After SubAgent completion, summarize key information for the user

When to use SubAgents:
- Complex multi-step analysis tasks
- Tasks requiring specialized skills (code analysis, documentation)
- Large-scale file search and processing
- Independent tasks that can be processed in parallel`,
      schema: z.object({
        description: z.string().describe("Detailed task description for the SubAgent"),
        subagent_type: z.enum(["general-purpose", "code-analyzer", "document-writer"]).describe("SubAgent type to use")
      })
    }
  );
}

// 并发工具分类
export function categorizeToolsByConcurrency(tools: any[]) {
  // 并发安全的工具（只读操作）
  const safeConcurrencyTools = tools.filter(tool => 
    ['ReadFile', 'Grep', 'ListDir', 'TaskTool', 'TodoRead'].includes(tool.name)
  );
  
  // 并发不安全的工具（写操作、系统命令等）
  const unsafeConcurrencyTools = tools.filter(tool => 
    ['WriteFile', 'EditFile', 'Bash', 'TodoWrite'].includes(tool.name)
  );
  
  return {
    safeConcurrencyTools,
    unsafeConcurrencyTools
  };
}

// 检查工具是否为并发安全的
export function isSafeConcurrencyTool(toolName: string): boolean {
  const safeTools = ['ReadFile', 'Grep', 'ListDir', 'TaskTool', 'TodoRead'];
  return safeTools.includes(toolName);
}
